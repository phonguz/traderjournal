package traderjournal.model.entities;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

import traderjournal.model.RequestFactoryUtilsJpa;

/**
 * Ccy generated by hbm2java
 */
@Entity
public class Ccy implements java.io.Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id = -1;
	private String name;

	@OneToMany(mappedBy="ccy", fetch=FetchType.LAZY,  cascade = {CascadeType.PERSIST,CascadeType.MERGE }) 
	private List<Account> accounts = new ArrayList<Account>();
	@OneToMany(mappedBy="ccy", fetch=FetchType.LAZY,  cascade = {CascadeType.PERSIST,CascadeType.MERGE }) 
	private List<Instrument> instruments = new ArrayList<Instrument>();
	public Ccy() {
	}

	public static List<Ccy> findAll(){
		return RequestFactoryUtilsJpa.findAll(Ccy.class);
		
	}
	
	public Ccy(int id, String name) {
		this.id = id;
		this.name = name;
	}

	public Ccy(int id, String name, List<Account> accounts, List<Instrument> instruments) {
		this.id = id;
		this.name = name;
		this.accounts = accounts;
		this.instruments = instruments;
	}

	public long getId() {
		return this.id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Account> getAccounts() {
		return this.accounts;
	}

	public void setAccounts(List<Account> accounts) {
		this.accounts = accounts;
	}

	public List<Instrument> getInstruments() {
		return this.instruments;
	}

	public void setInstruments(List<Instrument> instruments) {
		this.instruments = instruments;
	}

	
	
	public Integer getVersion(){
		return 0;
	}
}
